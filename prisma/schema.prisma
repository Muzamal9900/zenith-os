generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model Tenant {
  id            String         @id @default(cuid())
  name          String
  industry      String
  domain        String?        @unique
  contactEmail  String?
  contactPhone  String?
  businessAddress String?
  billingPlan   String?
  billingSettings Json         @default("{}")
  settings      Json           @default("{}")
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activities    Activity[]
  companies     Company[]
  contacts      Contact[]
  customFields  CustomField[]
  deals         Deal[]
  integrations  Integration[]
  notifications Notification[]
  reports       Report[]
  users         User[]
  websites      Website[]
  workflows     Workflow[]
  onboardingState OnboardingState?
  tenantTools   TenantTool[]

  @@map("tenants")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  role          UserRole       @default(USER)
  isActive      Boolean        @default(true)
  lastLogin     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenantId      String
  activities    Activity[]
  contacts      Contact[]
  deals         Deal[]
  notifications Notification[]
  reports       Report[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Contact {
  id             String             @id @default(cuid())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  title          String?
  avatar         String?
  status         ContactStatus      @default(LEAD)
  source         String?
  tags           String[]           @default([])
  customData     Json               @default("{}")
  notes          String?
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  tenantId       String
  assignedUserId String?
  companyId      String?
  activities     Activity[]
  assignedUser   User?              @relation(fields: [assignedUserId], references: [id])
  company        Company?           @relation(fields: [companyId], references: [id])
  tenant         Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customFields   CustomFieldValue[]
  deals          Deal[]

  @@map("contacts")
}

model Company {
  id          String       @id @default(cuid())
  name        String
  website     String?
  industry    String?
  size        CompanySize?
  description String?
  logo        String?
  address     Json?        @default("{}")
  customData  Json         @default("{}")
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contacts    Contact[]
  deals       Deal[]

  @@map("companies")
}

model Deal {
  id             String     @id @default(cuid())
  title          String
  description    String?
  value          Decimal    @db.Decimal(10, 2)
  stage          String
  probability    Int        @default(0)
  closeDate      DateTime?
  source         String?
  tags           String[]   @default([])
  customData     Json       @default("{}")
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  tenantId       String
  assignedUserId String?
  contactId      String?
  companyId      String?
  activities     Activity[]
  assignedUser   User?      @relation(fields: [assignedUserId], references: [id])
  company        Company?   @relation(fields: [companyId], references: [id])
  contact        Contact?   @relation(fields: [contactId], references: [id])
  tenant         Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("deals")
}

model Activity {
  id             String         @id @default(cuid())
  type           ActivityType
  title          String
  description    String?
  dueDate        DateTime?
  completedAt    DateTime?
  status         ActivityStatus @default(PENDING)
  priority       Priority       @default(MEDIUM)
  customData     Json           @default("{}")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tenantId       String
  assignedUserId String?
  contactId      String?
  dealId         String?
  assignedUser   User?          @relation(fields: [assignedUserId], references: [id])
  contact        Contact?       @relation(fields: [contactId], references: [id])
  deal           Deal?          @relation(fields: [dealId], references: [id])
  tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model CustomField {
  id        String             @id @default(cuid())
  name      String
  type      CustomFieldType
  required  Boolean            @default(false)
  options   String[]           @default([])
  order     Int                @default(0)
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  tenantId  String
  values    CustomFieldValue[]
  tenant    Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("custom_fields")
}

model CustomFieldValue {
  id            String      @id @default(cuid())
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customFieldId String
  contactId     String
  contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([customFieldId, contactId])
  @@map("custom_field_values")
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String
  steps       Json     @default("[]")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model Integration {
  id        String          @id @default(cuid())
  name      String
  type      IntegrationType
  config    Json            @default("{}")
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  tenantId  String
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model Report {
  id          String     @id @default(cuid())
  name        String
  type        ReportType
  config      Json       @default("{}")
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tenantId    String
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id])
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json             @default("{}")
  createdAt DateTime         @default(now())
  tenantId  String
  userId    String
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ToolSettings {
  id          String   @id @default(cuid())
  toolId      String   @unique
  enabled     Boolean  @default(false)
  onDashboard Boolean  @default(false)
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tool_settings")
}

model UserTool {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  icon        String
  size        String   @default("medium")
  settings    Json     @default("{}")
  enabled     Boolean  @default(false)
  onDashboard Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_tools")
}

model Website {
  id           String        @id @default(cuid())
  url          String
  title        String?
  description  String?
  status       WebsiteStatus @default(PENDING)
  lastChecked  DateTime?
  sslEnabled   Boolean       @default(false)
  responseTime Int?
  errorMessage String?
  settings     Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("websites")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum ContactStatus {
  LEAD
  PROSPECT
  CUSTOMER
  INACTIVE
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  FOLLOW_UP
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CustomFieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
  DATE
  SELECT
  MULTI_SELECT
  CHECKBOX
  TEXTAREA
}

enum IntegrationType {
  EMAIL
  CALENDAR
  PHONE
  SMS
  WEBHOOK
  API
}

enum ReportType {
  CONTACTS
  DEALS
  ACTIVITIES
  PERFORMANCE
  CUSTOM
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  REMINDER
}

enum WebsiteStatus {
  PENDING
  CONNECTED
  ERROR
  DISCONNECTED
}

model OnboardingState {
  id           String   @id @default(cuid())
  tenantId     String   @unique
  currentStep  Int      @default(0)
  steps        Json     @default("[]")
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("onboarding_states")
}

model TenantTool {
  id            String   @id @default(cuid())
  tenantId      String
  toolId        String
  isEnabled     Boolean  @default(false)
  configuration Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, toolId])
  @@map("tenant_tools")
}
